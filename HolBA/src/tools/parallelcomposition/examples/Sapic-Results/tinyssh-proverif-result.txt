Linear part:
exp(exp(g,a),b) = exp(exp(g,b),a)
Completing equations...
Completed equations:
exp(exp(g,a),b) = exp(exp(g,b),a)
Convergent part:
sdec(senc(x_1,x_2),x_2) = x_1
getMessage(revealSign(x_1,x_2)) = x_1
revealVerify(revealSign(x_1,x_2),x_1,pk(x_2)) = okay
fst((x_1,x_2)) = x_1
snd((x_1,x_2)) = x_2
Completing equations...
Completed equations:
snd((x_1,x_2)) = x_2
fst((x_1,x_2)) = x_1
revealVerify(revealSign(x_1,x_2),x_1,pk(x_2)) = okay
getMessage(revealSign(x_1,x_2)) = x_1
sdec(senc(x_1,x_2),x_2) = x_1
Process 0 (that is, the initial process):
{1}!
{2}new skS_1: bitstring;
{3}let pkS_1: bitstring = pk(skS_1) in
{4}out(att, pkS_1);
{5}!
{6}new skP_1: bitstring;
{7}let pkP_1: bitstring = pk(skP_1) in
{8}out(att, pkP_1);
{9}!
(
    {10}let skP: bitstring = skP_1 in
    {11}new a_1: bitstring;
    {12}let gA_1: bitstring = exp(g,a_1) in
    {13}out(att, gA_1);
    {14}in(att, B_1: bitstring);
    {15}in(att, sig_1: bitstring);
    {16}in(att, opks_1: bitstring);
    {17}let =pkS_1 = opks_1 in
    {18}let h_1: bitstring = hash3(gA_1,B_1,pkS_1) in
    {19}let k_1: bitstring = exp(B_1,a_1) in
    {20}let x_1: bitstring = verify(sig_1,pkS_1) in
    {21}let =x_1 = okay in
    {22}event eAcceptP(pkS_1,pkP_1);
    {23}let kPS_1: bitstring = kdfPtoS(k_1,h_1) in
    {24}let kSP_1: bitstring = kdfStoP(k_1,h_1) in
    {25}out(att, enc(suser_auth,kPS_1));
    {26}in(att, userauth_answer_1: bitstring);
    {27}let =dec(userauth_answer_1,kSP_1) = suser_auth in
    {28}event eAcceptP2(pkS_1,pkP_1);
    {29}out(att, enc(sign(suser_answer,skP),kPS_1))
) | (
    {30}let skS: bitstring = skS_1 in
    {31}in(att, a491_a_1: bitstring);
    {32}new a774_skey_1: bitstring;
    {33}let a773_SKey_1: bitstring = a774_skey_1 in
    {34}let a776_sk_1: bitstring = exp(g,a773_SKey_1) in
    {35}out(att, a776_sk_1);
    {36}let a780_kAB_1: bitstring = exp(a491_a_1,a773_SKey_1) in
    {37}let a785_HMAC_1: bitstring = hash3(a491_a_1,pkS_1,a776_sk_1) in
    {38}event eAcceptS(pkS_1,pkP_1);
    {39}let a791_signature_1: bitstring = sign(sinputs,skS) in
    {40}out(att, sign(sinputs,skS));
    {41}let a795_kPS_1: bitstring = kdfPtoS(a780_kAB_1,a785_HMAC_1) in
    {42}let a799_kSP_1: bitstring = kdfStoP(a780_kAB_1,a785_HMAC_1) in
    {43}in(att, a803_a_1: bitstring);
    {44}let a804_Dec_1: bitstring = dec(a803_a_1,a795_kPS_1) in
    {45}let a807_Enc_1: bitstring = enc(a804_Dec_1,a799_kSP_1) in
    {46}out(att, a807_Enc_1);
    {47}in(att, a7434_a_1: bitstring);
    {48}let a7435_Dec_1: bitstring = dec(a7434_a_1,a795_kPS_1) in
    {49}let a7439_Ver_1: bitstring = verify(a7435_Dec_1,pkP_1) in
    {50}let =a7439_Ver_1 = okay in
    {51}event eAcceptS2(pkS_1,pkP_1)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}!
{2}new skS_1: bitstring;
{3}let pkS_1: bitstring = pk(skS_1) in
{4}out(att, pkS_1);
{5}!
{6}new skP_1: bitstring;
{7}let pkP_1: bitstring = pk(skP_1) in
{8}out(att, pkP_1);
{9}!
(
    {11}new a_1: bitstring;
    {12}let gA_1: bitstring = exp(g,a_1) in
    {13}out(att, gA_1);
    {14}in(att, B_1: bitstring);
    {15}in(att, sig_1: bitstring);
    {16}in(att, opks_1: bitstring);
    {17}let =pkS_1 = opks_1 in
    {20}let x_1: bitstring = verify(sig_1,pkS_1) in
    {21}let =x_1 = okay in
    {22}event eAcceptP(pkS_1,pkP_1);
    {19}let k_1: bitstring = exp(B_1,a_1) in
    {18}let h_1: bitstring = hash3(gA_1,B_1,pkS_1) in
    {23}let kPS_1: bitstring = kdfPtoS(k_1,h_1) in
    {25}out(att, enc(suser_auth,kPS_1));
    {26}in(att, userauth_answer_1: bitstring);
    {24}let kSP_1: bitstring = kdfStoP(k_1,h_1) in
    {27}let =dec(userauth_answer_1,kSP_1) = suser_auth in
    {28}event eAcceptP2(pkS_1,pkP_1);
    {10}let skP: bitstring = skP_1 in
    {29}out(att, enc(sign(suser_answer,skP),kPS_1))
) | (
    {31}in(att, a491_a_1: bitstring);
    {32}new a774_skey_1: bitstring;
    {33}let a773_SKey_1: bitstring = a774_skey_1 in
    {34}let a776_sk_1: bitstring = exp(g,a773_SKey_1) in
    {35}out(att, a776_sk_1);
    {38}event eAcceptS(pkS_1,pkP_1);
    {30}let skS: bitstring = skS_1 in
    {40}out(att, sign(sinputs,skS));
    {43}in(att, a803_a_1: bitstring);
    {37}let a785_HMAC_1: bitstring = hash3(a491_a_1,pkS_1,a776_sk_1) in
    {36}let a780_kAB_1: bitstring = exp(a491_a_1,a773_SKey_1) in
    {41}let a795_kPS_1: bitstring = kdfPtoS(a780_kAB_1,a785_HMAC_1) in
    {44}let a804_Dec_1: bitstring = dec(a803_a_1,a795_kPS_1) in
    {42}let a799_kSP_1: bitstring = kdfStoP(a780_kAB_1,a785_HMAC_1) in
    {45}let a807_Enc_1: bitstring = enc(a804_Dec_1,a799_kSP_1) in
    {46}out(att, a807_Enc_1);
    {47}in(att, a7434_a_1: bitstring);
    {48}let a7435_Dec_1: bitstring = dec(a7434_a_1,a795_kPS_1) in
    {49}let a7439_Ver_1: bitstring = verify(a7435_Dec_1,pkP_1) in
    {50}let =a7439_Ver_1 = okay in
    {51}event eAcceptS2(pkS_1,pkP_1)
)

-- Query not event(eAcceptP2(pkS,pkP))@i encoded as not event(eAcceptP2(pkS,pkP)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not event(eAcceptP2(pkS,pkP))@i
goal reachable: event(eAcceptP2(pk(skS_2),pk(skP_2)))
Abbreviations:
skS_2 = skS_1[!1 = @sid]
skP_2 = skP_1[!2 = @sid_1,!1 = @sid]

Derivation:
Abbreviations:
skS_2 = skS_1[!1 = @sid]
skP_2 = skP_1[!2 = @sid_1,!1 = @sid]
a = a_1[!3 = @sid_2,!2 = @sid_1,!1 = @sid]

1. Using the function g the attacker may obtain g.
attacker(g).

2. The attacker has some term a491_a.
attacker(a491_a).

3. The message a491_a that the attacker may have by 2 may be received at input {31}.
So the message sign(sinputs[],skS_2) may be sent to the attacker at output {40}.
attacker(sign(sinputs[],skS_2)).

4. The message pk(skS_2) may be sent to the attacker at output {4}.
attacker(pk(skS_2)).

5. The message exp(g,a) may be sent to the attacker at output {13}.
attacker(exp(g,a)).

6. By 5, the attacker may know exp(g,a).
By 1, the attacker may know g.
By 4, the attacker may know pk(skS_2).
Using the function hash3 the attacker may obtain hash3(exp(g,a),g,pk(skS_2)).
attacker(hash3(exp(g,a),g,pk(skS_2))).

7. By 5, the attacker may know exp(g,a).
By 6, the attacker may know hash3(exp(g,a),g,pk(skS_2)).
Using the function kdfStoP the attacker may obtain kdfStoP(exp(g,a),hash3(exp(g,a),g,pk(skS_2))).
attacker(kdfStoP(exp(g,a),hash3(exp(g,a),g,pk(skS_2)))).

8. The attacker initially knows suser_auth[].
attacker(suser_auth[]).

9. By 8, the attacker may know suser_auth[].
By 7, the attacker may know kdfStoP(exp(g,a),hash3(exp(g,a),g,pk(skS_2))).
Using the function enc the attacker may obtain enc(suser_auth[],kdfStoP(exp(g,a),hash3(exp(g,a),g,pk(skS_2)))).
attacker(enc(suser_auth[],kdfStoP(exp(g,a),hash3(exp(g,a),g,pk(skS_2))))).

10. The message g that the attacker may have by 1 may be received at input {14}.
The message sign(sinputs[],skS_2) that the attacker may have by 3 may be received at input {15}.
The message pk(skS_2) that the attacker may have by 4 may be received at input {16}.
The message enc(suser_auth[],kdfStoP(exp(g,a),hash3(exp(g,a),g,pk(skS_2)))) that the attacker may have by 9 may be received at input {26}.
So event eAcceptP2(pk(skS_2),pk(skP_2)) may be executed at {28}.
event(eAcceptP2(pk(skS_2),pk(skP_2))).

11. By 10, event(eAcceptP2(pk(skS_2),pk(skP_2))).
The goal is reached, represented in the following fact:
event(eAcceptP2(pk(skS_2),pk(skP_2))).


A more detailed output of the traces is available with
  set traceDisplay = long.

new skS_1: bitstring creating skS_3 at {2} in copy a_2

out(att, ~M) with ~M = pk(skS_3) at {4} in copy a_2

new skP_1: bitstring creating skP_3 at {6} in copy a_2, a_3

out(att, ~M_1) with ~M_1 = pk(skP_3) at {8} in copy a_2, a_3

new a_1: bitstring creating a_4 at {11} in copy a_2, a_3, a_5

out(att, ~M_2) with ~M_2 = exp(g,a_4) at {13} in copy a_2, a_3, a_5

new skP_1: bitstring creating skP_4 at {6} in copy a_2, a_6

out(att, ~M_3) with ~M_3 = pk(skP_4) at {8} in copy a_2, a_6

new a_1: bitstring creating a_7 at {11} in copy a_2, a_6, a_8

out(att, ~M_4) with ~M_4 = exp(g,a_7) at {13} in copy a_2, a_6, a_8

in(att, a_9) at {31} in copy a_2, a_6, a_8

new a774_skey_1: bitstring creating a774_skey at {32} in copy a_2, a_6, a_8

out(att, ~M_5) with ~M_5 = exp(g,a774_skey) at {35} in copy a_2, a_6, a_8

event eAcceptS(pk(skS_3),pk(skP_4)) at {38} in copy a_2, a_6, a_8

out(att, ~M_6) with ~M_6 = sign(sinputs,skS_3) at {40} in copy a_2, a_6, a_8

in(att, g) at {14} in copy a_2, a_3, a_5

in(att, ~M_6) with ~M_6 = sign(sinputs,skS_3) at {15} in copy a_2, a_3, a_5

in(att, ~M) with ~M = pk(skS_3) at {16} in copy a_2, a_3, a_5

event eAcceptP(pk(skS_3),pk(skP_3)) at {22} in copy a_2, a_3, a_5

out(att, ~M_7) with ~M_7 = enc(suser_auth,kdfPtoS(exp(g,a_4),hash3(exp(g,a_4),g,pk(skS_3)))) at {25} in copy a_2, a_3, a_5

in(att, enc(suser_auth,kdfStoP(~M_2,hash3(~M_2,g,~M)))) with enc(suser_auth,kdfStoP(~M_2,hash3(~M_2,g,~M))) = enc(suser_auth,kdfStoP(exp(g,a_4),hash3(exp(g,a_4),g,pk(skS_3)))) at {26} in copy a_2, a_3, a_5

event eAcceptP2(pk(skS_3),pk(skP_3)) at {28} in copy a_2, a_3, a_5 (goal)

The event eAcceptP2(pk(skS_3),pk(skP_3)) is executed at {28} in copy a_2, a_3, a_5.
A trace has been found.
RESULT not event(eAcceptP2(pkS,pkP))@i is false.
-- Query not event(eAcceptS2(pkS,pkP))@i encoded as not event(eAcceptS2(pkS,pkP)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not event(eAcceptS2(pkS,pkP))@i
goal reachable: event(eAcceptS2(pk(skS_2),pk(skP_2)))
Abbreviations:
skS_2 = skS_1[!1 = @sid]
skP_2 = skP_1[!2 = @sid_1,!1 = @sid]

Derivation:
Abbreviations:
skS_2 = skS_1[!1 = @sid]
skP_2 = skP_1[!2 = @sid_1,!1 = @sid]
a774_skey = a774_skey_1[a491_a_1 = exp(g,a),!3 = @sid_2,!2 = @sid_1,!1 = @sid]
a_2 = a_1[!3 = @sid_3,!2 = @sid_1,!1 = @sid]

1. The attacker has some term a.
attacker(a).

2. Using the function g the attacker may obtain g.
attacker(g).

3. By 2, the attacker may know g.
By 1, the attacker may know a.
Using the function exp the attacker may obtain exp(g,a).
attacker(exp(g,a)).

4. The message exp(g,a) that the attacker may have by 3 may be received at input {31}.
So the message exp(g,a774_skey) may be sent to the attacker at output {35}.
attacker(exp(g,a774_skey)).

5. The message pk(skS_2) may be sent to the attacker at output {4}.
attacker(pk(skS_2)).

6. By 3, the attacker may know exp(g,a).
By 5, the attacker may know pk(skS_2).
By 4, the attacker may know exp(g,a774_skey).
Using the function hash3 the attacker may obtain hash3(exp(g,a),pk(skS_2),exp(g,a774_skey)).
attacker(hash3(exp(g,a),pk(skS_2),exp(g,a774_skey))).

7. By 4, the attacker may know exp(g,a774_skey).
By 1, the attacker may know a.
Using the function exp the attacker may obtain exp(exp(g,a774_skey),a).
attacker(exp(exp(g,a774_skey),a)).

8. By 7, the attacker may know exp(exp(g,a774_skey),a).
By 6, the attacker may know hash3(exp(g,a),pk(skS_2),exp(g,a774_skey)).
Using the function kdfPtoS the attacker may obtain kdfPtoS(exp(exp(g,a774_skey),a),hash3(exp(g,a),pk(skS_2),exp(g,a774_skey))).
attacker(kdfPtoS(exp(exp(g,a774_skey),a),hash3(exp(g,a),pk(skS_2),exp(g,a774_skey)))).

9. The attacker has some term a804_Dec.
attacker(a804_Dec).

10. By 9, the attacker may know a804_Dec.
By 8, the attacker may know kdfPtoS(exp(exp(g,a774_skey),a),hash3(exp(g,a),pk(skS_2),exp(g,a774_skey))).
Using the function enc the attacker may obtain enc(a804_Dec,kdfPtoS(exp(exp(g,a774_skey),a),hash3(exp(g,a),pk(skS_2),exp(g,a774_skey)))).
attacker(enc(a804_Dec,kdfPtoS(exp(exp(g,a774_skey),a),hash3(exp(g,a),pk(skS_2),exp(g,a774_skey))))).

11. The message exp(g,a_2) may be sent to the attacker at output {13}.
attacker(exp(g,a_2)).

12. By 11, the attacker may know exp(g,a_2).
By 2, the attacker may know g.
By 5, the attacker may know pk(skS_2).
Using the function hash3 the attacker may obtain hash3(exp(g,a_2),g,pk(skS_2)).
attacker(hash3(exp(g,a_2),g,pk(skS_2))).

13. By 11, the attacker may know exp(g,a_2).
By 12, the attacker may know hash3(exp(g,a_2),g,pk(skS_2)).
Using the function kdfPtoS the attacker may obtain kdfPtoS(exp(g,a_2),hash3(exp(g,a_2),g,pk(skS_2))).
attacker(kdfPtoS(exp(g,a_2),hash3(exp(g,a_2),g,pk(skS_2)))).

14. The attacker has some term a491_a.
attacker(a491_a).

15. The message a491_a that the attacker may have by 14 may be received at input {31}.
So the message sign(sinputs[],skS_2) may be sent to the attacker at output {40}.
attacker(sign(sinputs[],skS_2)).

16. By 11, the attacker may know exp(g,a_2).
By 12, the attacker may know hash3(exp(g,a_2),g,pk(skS_2)).
Using the function kdfStoP the attacker may obtain kdfStoP(exp(g,a_2),hash3(exp(g,a_2),g,pk(skS_2))).
attacker(kdfStoP(exp(g,a_2),hash3(exp(g,a_2),g,pk(skS_2)))).

17. The attacker initially knows suser_auth[].
attacker(suser_auth[]).

18. By 17, the attacker may know suser_auth[].
By 16, the attacker may know kdfStoP(exp(g,a_2),hash3(exp(g,a_2),g,pk(skS_2))).
Using the function enc the attacker may obtain enc(suser_auth[],kdfStoP(exp(g,a_2),hash3(exp(g,a_2),g,pk(skS_2)))).
attacker(enc(suser_auth[],kdfStoP(exp(g,a_2),hash3(exp(g,a_2),g,pk(skS_2))))).

19. The message g that the attacker may have by 2 may be received at input {14}.
The message sign(sinputs[],skS_2) that the attacker may have by 15 may be received at input {15}.
The message pk(skS_2) that the attacker may have by 5 may be received at input {16}.
The message enc(suser_auth[],kdfStoP(exp(g,a_2),hash3(exp(g,a_2),g,pk(skS_2)))) that the attacker may have by 18 may be received at input {26}.
So the message enc(sign(suser_answer[],skP_2),kdfPtoS(exp(g,a_2),hash3(exp(g,a_2),g,pk(skS_2)))) may be sent to the attacker at output {29}.
attacker(enc(sign(suser_answer[],skP_2),kdfPtoS(exp(g,a_2),hash3(exp(g,a_2),g,pk(skS_2))))).

20. By 19, the attacker may know enc(sign(suser_answer[],skP_2),kdfPtoS(exp(g,a_2),hash3(exp(g,a_2),g,pk(skS_2)))).
By 13, the attacker may know kdfPtoS(exp(g,a_2),hash3(exp(g,a_2),g,pk(skS_2))).
Using the function dec the attacker may obtain sign(suser_answer[],skP_2).
attacker(sign(suser_answer[],skP_2)).

21. By 20, the attacker may know sign(suser_answer[],skP_2).
By 8, the attacker may know kdfPtoS(exp(exp(g,a774_skey),a),hash3(exp(g,a),pk(skS_2),exp(g,a774_skey))).
Using the function enc the attacker may obtain enc(sign(suser_answer[],skP_2),kdfPtoS(exp(exp(g,a774_skey),a),hash3(exp(g,a),pk(skS_2),exp(g,a774_skey)))).
attacker(enc(sign(suser_answer[],skP_2),kdfPtoS(exp(exp(g,a774_skey),a),hash3(exp(g,a),pk(skS_2),exp(g,a774_skey))))).

22. The message exp(g,a) that the attacker may have by 3 may be received at input {31}.
The message enc(a804_Dec,kdfPtoS(exp(exp(g,a774_skey),a),hash3(exp(g,a),pk(skS_2),exp(g,a774_skey)))) that the attacker may have by 10 may be received at input {43}.
The message enc(sign(suser_answer[],skP_2),kdfPtoS(exp(exp(g,a774_skey),a),hash3(exp(g,a),pk(skS_2),exp(g,a774_skey)))) that the attacker may have by 21 may be received at input {47}.
So event eAcceptS2(pk(skS_2),pk(skP_2)) may be executed at {51}.
event(eAcceptS2(pk(skS_2),pk(skP_2))).

23. By 22, event(eAcceptS2(pk(skS_2),pk(skP_2))).
The goal is reached, represented in the following fact:
event(eAcceptS2(pk(skS_2),pk(skP_2))).


A more detailed output of the traces is available with
  set traceDisplay = long.

new skS_1: bitstring creating skS_3 at {2} in copy a_3

out(att, ~M) with ~M = pk(skS_3) at {4} in copy a_3

new skP_1: bitstring creating skP_3 at {6} in copy a_3, a_4

out(att, ~M_1) with ~M_1 = pk(skP_3) at {8} in copy a_3, a_4

new a_1: bitstring creating a_5 at {11} in copy a_3, a_4, a_6

out(att, ~M_2) with ~M_2 = exp(g,a_5) at {13} in copy a_3, a_4, a_6

new a_1: bitstring creating a_7 at {11} in copy a_3, a_4, a_8

out(att, ~M_3) with ~M_3 = exp(g,a_7) at {13} in copy a_3, a_4, a_8

new skP_1: bitstring creating skP_4 at {6} in copy a_3, a_9

out(att, ~M_4) with ~M_4 = pk(skP_4) at {8} in copy a_3, a_9

new a_1: bitstring creating a_10 at {11} in copy a_3, a_9, a_11

out(att, ~M_5) with ~M_5 = exp(g,a_10) at {13} in copy a_3, a_9, a_11

in(att, a_12) at {31} in copy a_3, a_9, a_11

new a774_skey_1: bitstring creating a774_skey_2 at {32} in copy a_3, a_9, a_11

out(att, ~M_6) with ~M_6 = exp(g,a774_skey_2) at {35} in copy a_3, a_9, a_11

event eAcceptS(pk(skS_3),pk(skP_4)) at {38} in copy a_3, a_9, a_11

out(att, ~M_7) with ~M_7 = sign(sinputs,skS_3) at {40} in copy a_3, a_9, a_11

in(att, g) at {14} in copy a_3, a_4, a_8

in(att, ~M_7) with ~M_7 = sign(sinputs,skS_3) at {15} in copy a_3, a_4, a_8

in(att, ~M) with ~M = pk(skS_3) at {16} in copy a_3, a_4, a_8

event eAcceptP(pk(skS_3),pk(skP_3)) at {22} in copy a_3, a_4, a_8

out(att, ~M_8) with ~M_8 = enc(suser_auth,kdfPtoS(exp(g,a_7),hash3(exp(g,a_7),g,pk(skS_3)))) at {25} in copy a_3, a_4, a_8

in(att, enc(suser_auth,kdfStoP(~M_3,hash3(~M_3,g,~M)))) with enc(suser_auth,kdfStoP(~M_3,hash3(~M_3,g,~M))) = enc(suser_auth,kdfStoP(exp(g,a_7),hash3(exp(g,a_7),g,pk(skS_3)))) at {26} in copy a_3, a_4, a_8

event eAcceptP2(pk(skS_3),pk(skP_3)) at {28} in copy a_3, a_4, a_8

out(att, ~M_9) with ~M_9 = enc(sign(suser_answer,skP_3),kdfPtoS(exp(g,a_7),hash3(exp(g,a_7),g,pk(skS_3)))) at {29} in copy a_3, a_4, a_8

in(att, exp(g,a_13)) at {31} in copy a_3, a_4, a_6

new a774_skey_1: bitstring creating a774_skey_3 at {32} in copy a_3, a_4, a_6

out(att, ~M_10) with ~M_10 = exp(g,a774_skey_3) at {35} in copy a_3, a_4, a_6

event eAcceptS(pk(skS_3),pk(skP_3)) at {38} in copy a_3, a_4, a_6

out(att, ~M_11) with ~M_11 = sign(sinputs,skS_3) at {40} in copy a_3, a_4, a_6

in(att, enc(a_14,kdfPtoS(exp(~M_10,a_13),hash3(exp(g,a_13),~M,~M_10)))) with enc(a_14,kdfPtoS(exp(~M_10,a_13),hash3(exp(g,a_13),~M,~M_10))) = enc(a_14,kdfPtoS(exp(exp(g,a774_skey_3),a_13),hash3(exp(g,a_13),pk(skS_3),exp(g,a774_skey_3)))) at {43} in copy a_3, a_4, a_6

out(att, ~M_12) with ~M_12 = enc(a_14,kdfStoP(exp(exp(g,a_13),a774_skey_3),hash3(exp(g,a_13),pk(skS_3),exp(g,a774_skey_3)))) at {46} in copy a_3, a_4, a_6

in(att, enc(dec(~M_9,kdfPtoS(~M_3,hash3(~M_3,g,~M))),kdfPtoS(exp(~M_10,a_13),hash3(exp(g,a_13),~M,~M_10)))) with enc(dec(~M_9,kdfPtoS(~M_3,hash3(~M_3,g,~M))),kdfPtoS(exp(~M_10,a_13),hash3(exp(g,a_13),~M,~M_10))) = enc(sign(suser_answer,skP_3),kdfPtoS(exp(exp(g,a774_skey_3),a_13),hash3(exp(g,a_13),pk(skS_3),exp(g,a774_skey_3)))) at {47} in copy a_3, a_4, a_6

event eAcceptS2(pk(skS_3),pk(skP_3)) at {51} in copy a_3, a_4, a_6 (goal)

The event eAcceptS2(pk(skS_3),pk(skP_3)) is executed at {51} in copy a_3, a_4, a_6.
A trace has been found.
RESULT not event(eAcceptS2(pkS,pkP))@i is false.
-- Query not event(eAcceptP(pkS,pkP))@i encoded as not event(eAcceptP(pkS,pkP)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not event(eAcceptP(pkS,pkP))@i
goal reachable: event(eAcceptP(pk(skS_2),pk(skP_2)))
Abbreviations:
skS_2 = skS_1[!1 = @sid]
skP_2 = skP_1[!2 = @sid_1,!1 = @sid]

Derivation:
Abbreviations:
skS_2 = skS_1[!1 = @sid]
skP_2 = skP_1[!2 = @sid_1,!1 = @sid]

1. The attacker has some term B.
attacker(B).

2. The attacker has some term a491_a.
attacker(a491_a).

3. The message a491_a that the attacker may have by 2 may be received at input {31}.
So the message sign(sinputs[],skS_2) may be sent to the attacker at output {40}.
attacker(sign(sinputs[],skS_2)).

4. The message pk(skS_2) may be sent to the attacker at output {4}.
attacker(pk(skS_2)).

5. The message B that the attacker may have by 1 may be received at input {14}.
The message sign(sinputs[],skS_2) that the attacker may have by 3 may be received at input {15}.
The message pk(skS_2) that the attacker may have by 4 may be received at input {16}.
So event eAcceptP(pk(skS_2),pk(skP_2)) may be executed at {22}.
event(eAcceptP(pk(skS_2),pk(skP_2))).

6. By 5, event(eAcceptP(pk(skS_2),pk(skP_2))).
The goal is reached, represented in the following fact:
event(eAcceptP(pk(skS_2),pk(skP_2))).


A more detailed output of the traces is available with
  set traceDisplay = long.

new skS_1: bitstring creating skS_3 at {2} in copy a

out(att, ~M) with ~M = pk(skS_3) at {4} in copy a

new skP_1: bitstring creating skP_3 at {6} in copy a, a_2

out(att, ~M_1) with ~M_1 = pk(skP_3) at {8} in copy a, a_2

new a_1: bitstring creating a_3 at {11} in copy a, a_2, a_4

out(att, ~M_2) with ~M_2 = exp(g,a_3) at {13} in copy a, a_2, a_4

new skP_1: bitstring creating skP_4 at {6} in copy a, a_5

out(att, ~M_3) with ~M_3 = pk(skP_4) at {8} in copy a, a_5

new a_1: bitstring creating a_6 at {11} in copy a, a_5, a_7

out(att, ~M_4) with ~M_4 = exp(g,a_6) at {13} in copy a, a_5, a_7

in(att, a_8) at {31} in copy a, a_5, a_7

new a774_skey_1: bitstring creating a774_skey at {32} in copy a, a_5, a_7

out(att, ~M_5) with ~M_5 = exp(g,a774_skey) at {35} in copy a, a_5, a_7

event eAcceptS(pk(skS_3),pk(skP_4)) at {38} in copy a, a_5, a_7

out(att, ~M_6) with ~M_6 = sign(sinputs,skS_3) at {40} in copy a, a_5, a_7

in(att, a_9) at {14} in copy a, a_2, a_4

in(att, ~M_6) with ~M_6 = sign(sinputs,skS_3) at {15} in copy a, a_2, a_4

in(att, ~M) with ~M = pk(skS_3) at {16} in copy a, a_2, a_4

event eAcceptP(pk(skS_3),pk(skP_3)) at {22} in copy a, a_2, a_4 (goal)

The event eAcceptP(pk(skS_3),pk(skP_3)) is executed at {22} in copy a, a_2, a_4.
A trace has been found.
RESULT not event(eAcceptP(pkS,pkP))@i is false.
-- Query not event(eAcceptS(pkS,pkP))@i encoded as not event(eAcceptS(pkS,pkP)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not event(eAcceptS(pkS,pkP))@i
goal reachable: event(eAcceptS(pk(skS_2),pk(skP_2)))
Abbreviations:
skS_2 = skS_1[!1 = @sid]
skP_2 = skP_1[!2 = @sid_1,!1 = @sid]

Derivation:
Abbreviations:
skS_2 = skS_1[!1 = @sid]
skP_2 = skP_1[!2 = @sid_1,!1 = @sid]

1. The attacker has some term a491_a.
attacker(a491_a).

2. The message a491_a that the attacker may have by 1 may be received at input {31}.
So event eAcceptS(pk(skS_2),pk(skP_2)) may be executed at {38}.
event(eAcceptS(pk(skS_2),pk(skP_2))).

3. By 2, event(eAcceptS(pk(skS_2),pk(skP_2))).
The goal is reached, represented in the following fact:
event(eAcceptS(pk(skS_2),pk(skP_2))).


A more detailed output of the traces is available with
  set traceDisplay = long.

new skS_1: bitstring creating skS_3 at {2} in copy a

out(att, ~M) with ~M = pk(skS_3) at {4} in copy a

new skP_1: bitstring creating skP_3 at {6} in copy a, a_2

out(att, ~M_1) with ~M_1 = pk(skP_3) at {8} in copy a, a_2

new a_1: bitstring creating a_3 at {11} in copy a, a_2, a_4

out(att, ~M_2) with ~M_2 = exp(g,a_3) at {13} in copy a, a_2, a_4

in(att, a_5) at {31} in copy a, a_2, a_4

new a774_skey_1: bitstring creating a774_skey at {32} in copy a, a_2, a_4

out(att, ~M_3) with ~M_3 = exp(g,a774_skey) at {35} in copy a, a_2, a_4

event eAcceptS(pk(skS_3),pk(skP_3)) at {38} in copy a, a_2, a_4 (goal)

The event eAcceptS(pk(skS_3),pk(skP_3)) is executed at {38} in copy a, a_2, a_4.
A trace has been found.
RESULT not event(eAcceptS(pkS,pkP))@i is false.
-- Query event(eAcceptP(pkS,pkP))@i ==> i > j && event(eAcceptS(pkS,pkP2))@j encoded as event(eAcceptP(pkS,pkP))@i ==> event(eAcceptS(pkS,pkP2))@i_1 && i > i_1 in process 1.
Translating the process into Horn clauses...
Completing...
Starting query event(eAcceptP(pkS,pkP))@i ==> i > j && event(eAcceptS(pkS,pkP2))@j
goal reachable: b-event(eAcceptS(pk(skS_2),pk(skP_2))) -> event(eAcceptP(pk(skS_2),pk(skP_3)))
The hypothesis occurs strictly before the conclusion.
Abbreviations:
skS_2 = skS_1[!1 = @sid]
skP_3 = skP_1[!2 = @sid_1,!1 = @sid]
skP_2 = skP_1[!2 = @sid_2,!1 = @sid]
RESULT event(eAcceptP(pkS,pkP))@i ==> i > j && event(eAcceptS(pkS,pkP2))@j is true.
-- Query event(eAcceptS2(pkS,pkP))@i ==> i > j && event(eAcceptP2(pkS,pkP))@j encoded as event(eAcceptS2(pkS,pkP))@i ==> event(eAcceptP2(pkS,pkP))@i_1 && i > i_1 in process 1.
Translating the process into Horn clauses...
Completing...
Starting query event(eAcceptS2(pkS,pkP))@i ==> i > j && event(eAcceptP2(pkS,pkP))@j
goal reachable: b-event(eAcceptP2(pk(skS_2),pk(skP_2))) -> event(eAcceptS2(pk(skS_2),pk(skP_2)))
The hypothesis occurs strictly before the conclusion.
Abbreviations:
skS_2 = skS_1[!1 = @sid]
skP_2 = skP_1[!2 = @sid_1,!1 = @sid]
RESULT event(eAcceptS2(pkS,pkP))@i ==> i > j && event(eAcceptP2(pkS,pkP))@j is true.
-- Query event(eAcceptS2(pk(skS_2),pk(skP_2)))@i && attacker(skP_2)@j ==> j > i encoded as event(v,eAcceptS2(pk(skS_2),pk(skP_2))) && attacker(skP_2)@i ==> event(v,eAcceptS2(pk(skS_2),pk(skP_2)))@i_1 && i > i_1 in process 1.
Translating the process into Horn clauses...
Completing...
Starting query event(eAcceptS2(pk(skS_2),pk(skP_2)))@i && attacker(skP_2)@j ==> j > i
RESULT event(eAcceptS2(pk(skS_2),pk(skP_2)))@i && attacker(skP_2)@j ==> j > i is true.
-- Query event(eAcceptS2(pk(skS_2),pk(skP_2)))@i && attacker(skS_2)@j ==> j > i encoded as event(v,eAcceptS2(pk(skS_2),pk(skP_2))) && attacker(skS_2)@i ==> event(v,eAcceptS2(pk(skS_2),pk(skP_2)))@i_1 && i > i_1 in process 1.
Translating the process into Horn clauses...
Completing...
Starting query event(eAcceptS2(pk(skS_2),pk(skP_2)))@i && attacker(skS_2)@j ==> j > i
RESULT event(eAcceptS2(pk(skS_2),pk(skP_2)))@i && attacker(skS_2)@j ==> j > i is true.

--------------------------------------------------------------
Verification summary:

Query not event(eAcceptP2(pkS,pkP))@i is false.

Query not event(eAcceptS2(pkS,pkP))@i is false.

Query not event(eAcceptP(pkS,pkP))@i is false.

Query not event(eAcceptS(pkS,pkP))@i is false.

Query event(eAcceptP(pkS,pkP))@i ==> i > j && event(eAcceptS(pkS,pkP2))@j is true.

Query event(eAcceptS2(pkS,pkP))@i ==> i > j && event(eAcceptP2(pkS,pkP))@j is true.

Query event(eAcceptS2(pk(skS_2),pk(skP_2)))@i && attacker(skP_2)@j ==> j > i is true.

Query event(eAcceptS2(pk(skS_2),pk(skP_2)))@i && attacker(skS_2)@j ==> j > i is true.

--------------------------------------------------------------

0.08s user 0.01s system 77% cpu 0.114 total

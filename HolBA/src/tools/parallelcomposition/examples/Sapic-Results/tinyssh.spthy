theory TinySSH

begin

builtins: diffie-hellman, symmetric-encryption, revealing-signing

functions: hash3/3, kdfPtoS/2, kdfStoP/2, E/3, enc/2, kgen/2, pk/1, sign/2, verify/2 [destructor], dec/2 [destructor]



equations: verify(sign(x,y),pk(y))=true, dec(enc(m,i),i)=m


//  Model 


let P(pkS,~skP,pkP) =
new ~a;
let gA=exp('g',~a) in
out(gA);
in(B);
in(sig);
in(opks);
if pkS=opks then
(
let h=hash3(gA,B,pkS) in
let k=exp(B,~a) in
if verify(sig,pkS)=true then
(
event AcceptP(pkS,pkP);
let kPS=kdfPtoS(k,h) in
let kSP=kdfStoP(k,h) in
out(enc('user_auth',kPS));
in(userauth_answer);
if dec(userauth_answer,kSP)='userauth_ok' then
(
event AcceptP2(pkS,pkP);
out(enc(sign('user_answer',~skP),kPS))
)
)
)

let S(~skS,pkS,pkP) =
in(491_a);
new ~774_skey;
let 773_SKey=~774_skey in 
let 776_sk=exp('g',773_SKey) in  
out(776_sk);
let 780_kAB=exp(491_a,773_SKey) in 
let 785_HMAC=hash3(491_a,776_sk,pkS) in 
event AcceptS(pkS,pkP);
let 791_signature=sign('inputs',~skS) in 
out(sign('inputs',~skS));
let 795_kPS=kdfPtoS(780_kAB,785_HMAC) in 
let 799_kSP=kdfStoP(780_kAB,785_HMAC) in 
in(803_a);
let 804_Dec=dec(803_a,795_kPS) in 
let 807_Enc=enc('userauth_ok',799_kSP) in 
out(807_Enc);
in(7434_a);
let 7435_Dec=dec(7434_a,795_kPS) in 
if verify(7435_Dec,pkP)=true then
(
event AcceptS2(pkS,pkP)
)

//  <Environment>


process:
 !(
	new ~skS;
	let pkS=pk(~skS) in  
	out(pkS);
       !(
		new ~skP;
		let pkP=pk(~skP) in	 
		out(pkP);
           !( P(pkS,~skP,pkP) || S(~skS,pkS,pkP) )
	)
  )


lemma sanity_AcceptP[reuse]: 
"not(Ex pkS pkP #i. AcceptP(pkS,pkP)@i)"

lemma sanity_AcceptS[reuse]: 
"not(Ex pkS pkP #i. AcceptS(pkS,pkP)@i)"

lemma injPS[reuse,use_induction]: 
 "All pkS pkP #i. AcceptP(pkS,pkP)@i ==>
    (Ex pkP2 #j. #j<#i & AcceptS(pkS,pkP2)@j)"


lemma sanity_AcceptP2[reuse]: 
"not(Ex pkS pkP #i. AcceptP2(pkS,pkP)@i)"

lemma sanity_AcceptS2[reuse]: 
"not(Ex pkS pkP #i. AcceptS2(pkS,pkP)@i)"

lemma injSP[reuse,use_induction]:
 "All pkS pkP #i. AcceptS2(pkS,pkP)@i ==>
    (Ex #j. #j<#i & (AcceptP2(pkS,pkP)@j))"


lemma key_secrecy[reuse]:
    "(All skS skP pkS pkP #i #i2.
        /* If P and S agree on keys */
        ((AcceptS2(pkS,pkP)@i) & (AcceptP2(pkS,pkP)@i2) & (i2 < i) & (pkS = pk(skS)) & (pkP = pk(skP)))
    ==>
        (/* No Compromised Keys */
	not(Ex #j. K(skS) @ j) & not(Ex #j. K(skP) @ j) )
        |
        ((Ex #j. K(skS) @ j) & not(Ex #j. K(skP) @ j) )
        |
	((Ex #j. K(skP) @ j) & not(Ex #j. K(skS) @ j) )
)"



end


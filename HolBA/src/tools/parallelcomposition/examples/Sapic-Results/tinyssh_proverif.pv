set attacker = active.
const g:bitstring.
free att:channel.
free sinputs:bitstring.
free suser_answer:bitstring.
free suser_auth:bitstring.
fun E(bitstring,bitstring,bitstring):bitstring.
fun enc(bitstring,bitstring):bitstring.
fun exp(bitstring,bitstring):bitstring.
fun fst(bitstring):bitstring.
fun getMessage(bitstring):bitstring.
fun hash3(bitstring,bitstring,bitstring):bitstring.
fun kdfPtoS(bitstring,bitstring):bitstring.
fun kdfStoP(bitstring,bitstring):bitstring.
fun kgen(bitstring,bitstring):bitstring.
fun okay():bitstring.
fun pair(bitstring,bitstring):bitstring.
fun pk(bitstring):bitstring.
fun revealSign(bitstring,bitstring):bitstring.
fun revealVerify(bitstring,bitstring,bitstring):bitstring.
fun sdec(bitstring,bitstring):bitstring.
fun senc(bitstring,bitstring):bitstring.
fun sign(bitstring,bitstring):bitstring.
fun snd(bitstring):bitstring.
event eAcceptP(bitstring,bitstring).
event eAcceptP2(bitstring,bitstring).
event eAcceptS(bitstring,bitstring).
event eAcceptS2(bitstring,bitstring).
equation forall a:bitstring,b:bitstring; exp( exp(g,a),b) = exp(exp(g,b),a).
equation forall x_1:bitstring, x_2:bitstring;   fst((x_1, x_2)) = x_1.
equation forall x_1:bitstring, x_2:bitstring;   getMessage(revealSign(x_1, x_2)) = x_1.
equation forall x_1:bitstring, x_2:bitstring;   revealVerify(revealSign(x_1, x_2), x_1, pk(x_2)) = okay.
equation forall x_1:bitstring, x_2:bitstring;   sdec(senc(x_1, x_2), x_2) = x_1.
equation forall x_1:bitstring, x_2:bitstring;   snd((x_1, x_2)) = x_2.
reduc forall i:bitstring, m:bitstring;   dec(enc(m, i), i) = m.
reduc forall x:bitstring, y:bitstring;   verify(sign(x, y), pk(y)) = okay.
(*sanity_AcceptP2*)
query pkP:bitstring, pkS:bitstring, i:time;
 event(eAcceptP2( pkS, pkP ))@i
.
(*sanity_AcceptS2*)
query pkP:bitstring, pkS:bitstring, i:time;
 event(eAcceptS2( pkS, pkP ))@i
.
(*sanity_AcceptP*)
query pkP:bitstring, pkS:bitstring, i:time;
 event(eAcceptP( pkS, pkP ))@i
.
(*sanity_AcceptS*)
query pkP:bitstring, pkS:bitstring, i:time;
 event(eAcceptS( pkS, pkP ))@i
.
(*injPS*)
query pkP:bitstring, pkP2:bitstring, pkS:bitstring, i:time, j:time;
 (event(eAcceptP( pkS, pkP ))@i) ==>
 ((j < i) && (event(eAcceptS( pkS, pkP2 ))@j))
.
(*injSP*)
query pkP:bitstring, pkS:bitstring, i:time, j:time;
 (event(eAcceptS2( pkS, pkP ))@i) ==>
 ((j < i) && (event(eAcceptP2( pkS, pkP ))@j))
.

query skS:bitstring, skP:bitstring, i:time, j:time;
(event(eAcceptS2( pk(skS), pk(skP) ))@i) && (attacker(skP)@j)   
 ==> (i < j).

query skS:bitstring, skP:bitstring, i:time, j:time;
(event(eAcceptS2( pk(skS), pk(skP) ))@i) && (attacker(skS)@j)   
 ==> (i < j).

let P(pkS_1:bitstring, skP_1:bitstring, pkP_1:bitstring)=
    new a_1:bitstring;
    let gA_1:bitstring=exp(g, a_1) in
    out(att,gA_1);
    in(att,B_1:bitstring);
    in(att,sig_1:bitstring);
    in(att,opks_1:bitstring);
    let (=pkS_1)=opks_1 in 
        (let h_1:bitstring=hash3(gA_1, B_1, pkS_1) in
         let k_1:bitstring=exp(B_1, a_1) in
         let x_1:bitstring=verify(sig_1, pkS_1) in
         let (=x_1)=okay in 
             (event eAcceptP( pkS_1, pkP_1 );
              let kPS_1:bitstring=kdfPtoS(k_1, h_1) in
              let kSP_1:bitstring=kdfStoP(k_1, h_1) in
              out(att,enc(suser_auth, kPS_1));
              in(att,userauth_answer_1:bitstring);
              let (=dec(userauth_answer_1, kSP_1))=suser_auth in 
                  (event eAcceptP2( pkS_1, pkP_1 );
                   out(att,enc(sign(suser_answer, skP_1), kPS_1))))).
let S(skS_1:bitstring, pkS_1:bitstring, pkP_1:bitstring)=
    in(att,a491_a_1:bitstring);
    new a774_skey_1:bitstring;
    let a773_SKey_1:bitstring=a774_skey_1 in
    let a776_sk_1:bitstring=exp(g, a773_SKey_1) in
    out(att,a776_sk_1);
    let a780_kAB_1:bitstring=exp(a491_a_1, a773_SKey_1) in
    let a785_HMAC_1:bitstring=hash3(a491_a_1, pkS_1, a776_sk_1) in
    event eAcceptS( pkS_1, pkP_1 );
    let a791_signature_1:bitstring=sign(sinputs, skS_1) in
    out(att,sign(sinputs, skS_1));
    let a795_kPS_1:bitstring=kdfPtoS(a780_kAB_1, a785_HMAC_1) in
    let a799_kSP_1:bitstring=kdfStoP(a780_kAB_1, a785_HMAC_1) in
    in(att,a803_a_1:bitstring);
    let a804_Dec_1:bitstring=dec(a803_a_1, a795_kPS_1) in
    let a807_Enc_1:bitstring=enc(a804_Dec_1, a799_kSP_1) in
    out(att,a807_Enc_1);
    in(att,a7434_a_1:bitstring);
    let a7435_Dec_1:bitstring=dec(a7434_a_1, a795_kPS_1) in
    let a7439_Ver_1:bitstring=verify(a7435_Dec_1, pkP_1) in
    let (=a7439_Ver_1)=okay in 
        (event eAcceptS2( pkS_1, pkP_1 )).


process
    !
    (new skS_1:bitstring;
     let pkS_1:bitstring=pk(skS_1) in
     out(att,pkS_1);
     !
     (new skP_1:bitstring;
      let pkP_1:bitstring=pk(skP_1) in
      out(att,pkP_1);
      (
      (!
      (((P(pkS_1, skP_1, pkP_1))
      | (S(skS_1, pkS_1, pkP_1))))
      ))
)
)
